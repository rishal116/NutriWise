/**
 * A list-like collection that holds weak references to objects.
 * Automatically cleans up dead references when a threshold is met.
 *
 * FinalizationRegistry is not used here due to it's lack of determinism.
 * FinalizationRegsitry callbacks are not guaranteed to be called after an object is garbage collected.
 */
export declare class WeakList<T extends object> implements Iterable<T> {
    #private;
    constructor();
    [Symbol.iterator](): Iterator<T>;
    push(value: T): void;
}
//# sourceMappingURL=WeakList.d.ts.map